<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>js on 子舒的博客</title>
    <link>https://zishu.me/tags/js/</link>
    <description>Recent content in js on 子舒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zishu.me/tags/js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>hugo纯静态编写一个字数统计脚本</title>
      <link>https://zishu.me/blog/194.html/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/194.html/</guid>
      <description>早上起来的时候看到微信群中有博友分享自己的建站时间，聊着聊着说到总字数上面，这时我才发现我的网站没有统计的地方，索性就自己写一个吧，因为是静态博客，所以不涉及后端、服务器等，只用前端的方式来解决。 这里</description>
    </item>
    
    <item>
      <title>用原生js给网站写个搜索功能</title>
      <link>https://zishu.me/blog/189.html/</link>
      <pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/189.html/</guid>
      <description>本文也算是一篇教程，可以给 hugo 网站加个搜索功能，并且实现热更新，体验感更好。 如果是其他程序，只需要按照特定的模板生成以下格式的文件即可，主要代码从 第2部分 开始，第一章节写的是如何用 hugo 输出文章列表 json 文件。</description>
    </item>
    
    <item>
      <title>利用 memos 生成的在线动态列表</title>
      <link>https://zishu.me/blog/181.html/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/181.html/</guid>
      <description>memos 是一个具有知识管理和社交功能的开源自托管备忘录中心。 Github地址：https://github.com/usememos/memos 可以用它本身提供的 api，然后结合静态博客，做成一个在线的动态</description>
    </item>
    
    <item>
      <title>分享一个页面点击特效</title>
      <link>https://zishu.me/blog/180.html/</link>
      <pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/180.html/</guid>
      <description>点击页面时可以弹出随机颜色小心心，目前我的网站就使用了这个特效。 直接将下面的代码复制到引入的 js 文件中即可，不用进行其他配置。 !function(e,t,a){function n(){c(&amp;#34;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: &amp;#39;&amp;#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}&amp;#34;),o(),r()}function r(){for(var e=0;e&amp;lt;d.length;e++)d[e].alpha&amp;lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&amp;#34;left:&amp;#34;+d[e].x+&amp;#34;px;top:&amp;#34;+d[e].y+&amp;#34;px;opacity:&amp;#34;+d[e].alpha+&amp;#34;;transform:scale(&amp;#34;+d[e].scale+&amp;#34;,&amp;#34;+d[e].scale+&amp;#34;) rotate(45deg);background:&amp;#34;+d[e].color+&amp;#34;;z-index:99999&amp;#34;);requestAnimationFrame(r)}function o(){var t=&amp;#34;function&amp;#34;==typeof e.onclick&amp;amp;&amp;amp;e.onclick;e.onclick=function(e){t&amp;amp;&amp;amp;t(),i(e)}}function i(e){var a=t.createElement(&amp;#34;div&amp;#34;);a.className=&amp;#34;heart&amp;#34;,d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(&amp;#34;style&amp;#34;);a.type=&amp;#34;text/css&amp;#34;;try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(&amp;#34;head&amp;#34;)[0].appendChild(a)}function s(){return&amp;#34;rgb(&amp;#34;+~~(255*Math.random())+&amp;#34;,&amp;#34;+~~(255*Math.random())+&amp;#34;,&amp;#34;+~~(255*Math.random())+&amp;#34;)&amp;#34;}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);</description>
    </item>
    
    <item>
      <title>js中 [ ]&#43;{ } 和 { }&#43;[ ] 的区别</title>
      <link>https://zishu.me/blog/175.html/</link>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/175.html/</guid>
      <description>[ ]+{ }：一个数组加一个对象。 加法会进行隐式类型转换，规则是调用其valueOf()或toString()以取得一个非对象的值(primitive value)。 如果两个值中的任何一个是字符串，则进行字符</description>
    </item>
    
    <item>
      <title>localStorage 的相关运用</title>
      <link>https://zishu.me/blog/171.html/</link>
      <pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/171.html/</guid>
      <description>localStorage 是浏览器自带的一个属性，只读的localStorage 属性允许你访问一个Document 源（origin）的对象 Storage；存储的数据将保存在浏览器会话中。localStorage 类似 sessi</description>
    </item>
    
    <item>
      <title>将数组中多个对象的同名属性值取出合并成新数组</title>
      <link>https://zishu.me/blog/168.html/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/168.html/</guid>
      <description>业务中需求的方法，接口返回一个数组，里面包含了大量的对象，具有同名的属性名，比较常见。但是需要将其中参数为name的属性值全部取出，合并成数组。 const num = [ { id: 1, name: &amp;#39;abc&amp;#39;, }, { id: 2, name: &amp;#39;xyz&amp;#39;, } ] function getFields(arrnum, field) { const resnum = []; for (let i</description>
    </item>
    
    <item>
      <title>人民币小写转大写</title>
      <link>https://zishu.me/blog/145.html/</link>
      <pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/145.html/</guid>
      <description>一个有趣的demo this.smalltoBIG(43533534.78)); //肆仟叁佰伍拾叁万叁仟伍佰叁拾肆元柒角捌分 smalltoBIG (n) { var fraction = [&amp;#39;角&amp;#39;, &amp;#39;分&amp;#39;]; var digit = [&amp;#39;零&amp;#39;, &amp;#39;壹&amp;#39;, &amp;#39;贰&amp;#</description>
    </item>
    
    <item>
      <title>浏览器收藏夹一键填写博客评论信息</title>
      <link>https://zishu.me/blog/120.html/</link>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/120.html/</guid>
      <description>先点击收藏一个页面，然后右键它，选择修改，在网址输入框复制下面的js代码，就可以一键填入了。 将其中的昵称，邮箱，网址修改成自己的信息。 目前支持绝大多数主流博客平台和系统，如果发现没有起作用，可以在下面</description>
    </item>
    
    <item>
      <title>揭秘箭头函数</title>
      <link>https://zishu.me/blog/82.html/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/82.html/</guid>
      <description>英文地址: https://javascript.plainenglish.io/demystifying-javascript-arrow-functions-7b2a0908a2b3 通过掘金翻译计划活动进行翻译 箭头函数是函数表达式的替代方法，但在语法上有所不同，不能在所有情况下使用。如果您还没有阅读 JavaScript 中的函数表达式，我建议您在继续阅读之前先阅读这篇文章。 现在，让我们试</description>
    </item>
    
    <item>
      <title>js奇怪的知识--console.table</title>
      <link>https://zishu.me/blog/81.html/</link>
      <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/81.html/</guid>
      <description>这个属性对我来说还真有些陌生，无意中发现的，查询过 MDN 之后听得挺有意思的，就记录一下。 根据字面意思就是“将数据以表格的形式显示”。这个方法需要一个必须参数 data，data 必须是一个数组或者是一个对象；</description>
    </item>
    
    <item>
      <title>通过 getTimezoneOffset() 方法判断当前时区是否为夏令时</title>
      <link>https://zishu.me/blog/80.html/</link>
      <pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/80.html/</guid>
      <description>getTimezoneOffset() 方法 方法返回 UTC 时间和本地时间之间的时差，以分钟为单位。 世界协调时间 (UTC) 是世界时间标准设定的时间, UTC 时间与 GMT 时间（格林威治时间）相同。 测一下我所在时区和标准时区的时间差 function myDate () { var d = new Date(); var n = d.getTimezoneOffset(); console.log(n) } myDate(); //</description>
    </item>
    
    <item>
      <title>使用js随机生成背景颜色</title>
      <link>https://zishu.me/blog/78.html/</link>
      <pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/78.html/</guid>
      <description>先写一个简单的 html 页面出来 &amp;lt;style&amp;gt; /* ... */ &amp;lt;/style&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;html&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;css&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;js&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 通过 Math.random() 属性可以随机生成一个数字，然后通过转化为十六进制的方法进行处理，下面就是随机生成 6 位数字的代码，并进行转化的代码。 const randomHex = () =&amp;gt; `#${Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, &amp;#34;0&amp;#34;)}`; 可以在控制台输出看</description>
    </item>
    
    <item>
      <title>实时监听页面的变化</title>
      <link>https://zishu.me/blog/60.html/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/60.html/</guid>
      <description>问题产生于需求，因为项目需要适配pc和移动端多套布局，所以某些元素在特定的宽度下会产生错位的现象。 如果是在css中，可以很好的判断，使用媒体查询可以实时检测页面的宽度，从而给予标签不同的属性。 @media (max-width:768px){ ... }</description>
    </item>
    
    <item>
      <title>用ajax请求获取数据</title>
      <link>https://zishu.me/blog/57.html/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/57.html/</guid>
      <description>通过jquery进行ajax请求数据是一种较为简便的方式，我简单写了一个本地的data.json文件，然后用get请求数据，下面是部分代码 // ajax 请求获取数据 function picShow(){ var str = &amp;#39;&amp;#39;; $.ajax({ url:&amp;#39;./js/data.json&amp;#39;, type:&amp;#39;get&amp;#39;, dataType:&amp;#39;json&amp;#39;, success:function(data){ console.log(&amp;#39;success&amp;#39;) }, error: function() { console.log(&amp;#39;error&amp;#39;) } }) } picShow(); 但是</description>
    </item>
    
    <item>
      <title>ES5 和 ES6 的区别？</title>
      <link>https://zishu.me/blog/48.html/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/48.html/</guid>
      <description>一、javascript 由三部分组成 1.ECMAScript（核心） 它规定了语言的组成部分：法语，类型，语句，关键字，操作符等等。 2.DOM（文档对象模型） DOM 把整个页面映射为一个多层节点结果，开发人员</description>
    </item>
    
    <item>
      <title>webpack 的核心概念和构建流程</title>
      <link>https://zishu.me/blog/47.html/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/47.html/</guid>
      <description>1.webpack 的核心概念 entry（入口）：一个可执行模块或者库的入口。定义了打包后的入口文件。 output（出口）：指示 webpack 如何去输出，以及在哪里输出。 path: 打包文件存放的绝对路径 publicPath: 网站运行时的访问路径 filename: 打包后的文件</description>
    </item>
    
    <item>
      <title>javascript 进阶问题</title>
      <link>https://zishu.me/blog/36.html/</link>
      <pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/36.html/</guid>
      <description>Github: https://github.com/lydiahallie/javascript-questions 相当不错的一个 Github 仓库，javascript questions ，作者每周都会发布一些有关 javascript 的题目，虽然不难但是考察细节，刷了一会，其实一些很简单的问题，结果因为细节思考不到位直接出错。 引用作者的话：我在我的 Instagram 上每天</description>
    </item>
    
    <item>
      <title>在 js 中运算不能随便把 value 属性定义成变量</title>
      <link>https://zishu.me/blog/22.html/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/22.html/</guid>
      <description>在写一个小 demo 的时候，无意中发现定义变量的时候直接写入 value，会导致获取不到数据，或者获取的不是我们想要的内容，在 js 中运算不能随便把 value 属性定义成变量 先看一段代码 &amp;lt;input type=&amp;#34;text&amp;#34;&amp;#34; id=&amp;#34;a&amp;#34;&amp;gt; &amp;lt;span&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;b&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;button&amp;#34; value=&amp;#34;=&amp;#34; onclick=&amp;#34;beto()&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;sub&amp;#34; disabled&amp;gt; &amp;lt;script&amp;gt; function beto() {</description>
    </item>
    
    <item>
      <title>事件监听函数，以及事件的捕获和冒泡机制</title>
      <link>https://zishu.me/blog/21.html/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/21.html/</guid>
      <description>事件一般是用于浏览器和用户操作之间的交互，当用户执行某些特殊的操作时，浏览器给予反应，触发绑定的事件，事件流，事件发生时会在元素节点和根节点之间按照约定的顺序传播，事件经过的所有节点都会受到事件的影响</description>
    </item>
    
    <item>
      <title>有关 js 函数，方法的一些补充总结</title>
      <link>https://zishu.me/blog/17.html/</link>
      <pubDate>Sat, 14 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/17.html/</guid>
      <description>数据类型，构造函数，原型和原型链的一些讲解补充 一、数据类型 1.5 个基本类型 string number boolean undefined 未定义 null 值为空 symbol 表示一个符号，符号类型是唯一的并且是不可修改的 最常见的还是前三种，字符串，数字，布尔值 2.常见的引用类型 引</description>
    </item>
    
    <item>
      <title>面向对象编程</title>
      <link>https://zishu.me/blog/15.html/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zishu.me/blog/15.html/</guid>
      <description>面向对象把构成问题的 transaction 分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为，意在写出通用代码，加强代码重用，屏蔽差异性。 一、什么是面向对象编</description>
    </item>
    
  </channel>
</rss>
