<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>结束 on 子舒的博客</title>
    <link>https://zishu.me/categories/%E7%BB%93%E6%9D%9F/</link>
    <description>Recent content in 结束 on 子舒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://zishu.me/categories/%E7%BB%93%E6%9D%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分析 VScode 中 Live Server 插件</title>
      <link>https://zishu.me/blog/217.html/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://zishu.me/blog/217.html/</guid>
      <description>在 VScode 中运行 Live Server 插件时，会默认给网页添加一串 js 代码，用于实现浏览器的实时重新加载（live reloading）功能，通过WebSocket与服务器进行通信。 if (&amp;#39;WebSocket&amp;#39; in window) { (function () { function refreshCSS() { var sheets = [].slice.call(document.getElementsByTagName(&amp;#34;link&amp;#34;)); var head = document.getElementsByTagName(&amp;#34;head&amp;#34;)[0]; for (var i = 0; i &amp;lt; sheets.length; ++i) { var elem = sheets[i]; var parent = elem.parentElement || head; parent.removeChild(elem); var rel = elem.rel; if (elem.href &amp;amp;&amp;amp; typeof rel != &amp;#34;string&amp;#34; || rel.length == 0 || rel.toLowerCase() == &amp;#34;stylesheet&amp;#34;) { var url = elem.href.replace(/(&amp;amp;|\?)_cacheOverride=\d+/, &amp;#39;&amp;#39;); elem.href = url + (url.indexOf(&amp;#39;?&amp;#39;) &amp;gt;= 0 ? &amp;#39;&amp;amp;&amp;#39; : &amp;#39;?&amp;#39;) + &amp;#39;_cacheOverride=&amp;#39; + (new Date().valueOf()); } parent.appendChild(elem); } } var protocol = window.location.protocol === &amp;#39;http:&amp;#39; ? &amp;#39;ws://&amp;#39; : &amp;#39;wss://&amp;#39;; var address = protocol + window.location.host + window.location.pathname + &amp;#39;/ws&amp;#39;; var socket = new WebSocket(address); socket.onmessage = function (msg) { if (msg.data == &amp;#39;reload&amp;#39;) window.location.reload(); else if (msg.data == &amp;#39;refreshcss&amp;#39;) refreshCSS(); }; if (sessionStorage &amp;amp;&amp;amp; !sessionStorage.getItem(&amp;#39;IsThisFirstTime_Log_From_LiveServer&amp;#39;)) { console.log(&amp;#39;Live reload enabled.&amp;#39;); sessionStorage.setItem(&amp;#39;IsThisFirstTime_Log_From_LiveServer&amp;#39;, true); } })(); } else { console.error(&amp;#39;Upgrade your browser. This Browser is NOT supported WebSocket for Live - Reloading.&amp;#39;); } 1.首先判断浏览器是否支持 WebSocket if (&amp;#39;WebSocket&amp;#39; in window) 这个条件语句检查浏览器是否支持 WebSocket。如果支持，就执行后续的代码块，否则输出错误信息并停止执行。 2.定义refreshCSS函数 function refreshCSS() { // ... } 这个函数用于刷新页面上的css。它会遍历页面上所有的 &amp;lt;link&amp;gt; 标签，移除它们，然后再次添加，触发css的重新加载。 3.构建WebSocket连接 var protocol = window.location.protocol === &amp;#39;http:&amp;#39; ? &amp;#39;ws://&amp;#39; : &amp;#39;wss://&amp;#39;; var address = protocol + window.location.host + window.location.pathname + &amp;#39;/ws&amp;#39;; var socket = new WebSocket(address); 这部分代码根据当前页面的协议（HTTP或HTTPS）构建WebSocket的连接地址，然后创建一个WebSocket对象，连接到这个地址。 4.WebSocket消息处理 socket.onmessage = function (msg) { if (msg.data == &amp;#39;reload&amp;#39;) window.location.reload(); else if (msg.data == &amp;#39;refreshcss&amp;#39;) refreshCSS(); }; 当WebSocket接收到消息时，会执行这个回调函数。如果消息是 &amp;lsquo;reload&amp;rsquo;，则刷新整个页面；如果消息是 &amp;lsquo;refreshcss&amp;rsquo;，则调用refreshCSS函数刷新CSS。 5.检测是否执行成功 通过判断 sessionStorage &amp;amp;&amp;amp; !sessionStorage.getItem(&#39;IsThisFirstTime_Log_From_LiveServer&#39;) 属性监测前面的代码是否运行成功，并返回一定的提示，这里可以在前端用于进行标记，并且只会在WebSocket链接成功时返回，如果时更新数据不会重复运行。 if (sessionStorage &amp;amp;&amp;amp; !sessionStorage.getItem(&amp;#39;IsThisFirstTime_Log_From_LiveServer&amp;#39;))</description>
    </item>
  </channel>
</rss>
